/*
 * WorkspaceView.java
 *
 * Created on Nov 22, 2010, 11:03:30 AM
 */
package at.ac.ait.speedr;

import at.ac.ait.speedr.table.model.onedim.RDoubleTableModel;
import at.ac.ait.speedr.table.model.onedim.RIntegerTableModel;
import at.ac.ait.speedr.table.model.onedim.RStringTableModel;
import at.ac.ait.speedr.table.model.twodim.RDataFrameTableModel;
import at.ac.ait.speedr.table.model.twodim.RDoubleMatrixTableModel;
import at.ac.ait.speedr.table.model.twodim.RIntegerMatrixTableModel;
import at.ac.ait.speedr.table.model.twodim.RStringMatrixTableModel;
import at.ac.ait.speedr.workspace.RObject;
import at.ac.ait.speedr.workspace.Workspace;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.TableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreePath;
import org.rosuda.REngine.REXP;
import org.rosuda.REngine.REXPDouble;
import org.rosuda.REngine.REXPGenericVector;
import org.rosuda.REngine.REXPInteger;
import org.rosuda.REngine.REXPMismatchException;
import org.rosuda.REngine.REXPString;
import org.rosuda.REngine.REngineException;

/**
 *
 * @author visnei
 */
public class WorkspaceView extends javax.swing.JPanel {

    private static WorkspaceView instance;
    private Workspace workspace;
    private SpeedRFrame mainFrame;

    /** Creates new form WorkspaceView */
    public WorkspaceView(SpeedRFrame mainFrame) {
        WorkspaceView.instance = this;
        this.mainFrame = mainFrame;
        workspace = new Workspace();
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        workspaceTree = new javax.swing.JTree();

        jScrollPane1.setBorder(null);

        workspaceTree.setModel(workspace.getWorkspace());
        workspaceTree.getSelectionModel().setSelectionMode
        (javax.swing.tree.TreeSelectionModel.SINGLE_TREE_SELECTION);
        workspaceTree.addTreeWillExpandListener(new javax.swing.event.TreeWillExpandListener() {
            public void treeWillCollapse(javax.swing.event.TreeExpansionEvent evt)throws javax.swing.tree.ExpandVetoException {
            }
            public void treeWillExpand(javax.swing.event.TreeExpansionEvent evt)throws javax.swing.tree.ExpandVetoException {
                workspaceTreeTreeWillExpand(evt);
            }
        });
        workspaceTree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                workspaceTreeMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(workspaceTree);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 74, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void workspaceTreeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_workspaceTreeMouseClicked
        if (evt.getClickCount() == 2) {
            try {
                DefaultMutableTreeNode node = (DefaultMutableTreeNode) workspaceTree.getLastSelectedPathComponent();
                if (node != workspace.getWorkspace().getRoot()) {
                    RObject ro = (RObject) node.getUserObject();
                    REXP content = workspace.loadContent(ro.getRSymbol());
                    int[] dim = content.dim();

                    if (dim == null) {
                        if (ro.getType().equals("data.frame")) {
                            openTwoDimensionalTable(ro, content);
                        } else {
                            openOneDimensionalTable(ro, content);
                        }
                    } else if (dim.length == 1) {
                        openOneDimensionalTable(ro, content);
                    } else if (dim.length == 2) {
                        openTwoDimensionalTable(ro, content);
                    }
                }


            } catch (REngineException ex) {
                Logger.getLogger(WorkspaceView.class.getName()).log(Level.SEVERE, null, ex);
            } catch (REXPMismatchException ex) {
                Logger.getLogger(WorkspaceView.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_workspaceTreeMouseClicked

    private void workspaceTreeTreeWillExpand(javax.swing.event.TreeExpansionEvent evt)throws javax.swing.tree.ExpandVetoException {//GEN-FIRST:event_workspaceTreeTreeWillExpand
        TreePath p = evt.getPath();
        if (!workspaceTree.hasBeenExpanded(p)) {
            try {
                DefaultMutableTreeNode n = (DefaultMutableTreeNode) p.getLastPathComponent();
                workspace.addListChildren(n);
            } catch (Exception ex) {
                Logger.getLogger(WorkspaceView.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(workspaceTree,
                        "Can not load list children!\n" + ex.getMessage(), "Error",
                        JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_workspaceTreeTreeWillExpand

    private void openOneDimensionalTable(RObject ro, REXP content) throws REXPMismatchException {
        TableModel model = null;
        if (content.isInteger()) {
            model = new RIntegerTableModel((REXPInteger) content);
        } else if (content.isNumeric()) {
            model = new RDoubleTableModel((REXPDouble) content);
        } else if (content.isString() || content.isFactor()) {
            model = new RStringTableModel((REXPString) content);
        }
        if (model != null) {
            mainFrame.openTable(model, ro.getName());
        }
    }

    private void openTwoDimensionalTable(RObject ro, REXP content) throws REXPMismatchException {
        if (ro.getType().equals("data.frame")) {
            RDataFrameTableModel model = new RDataFrameTableModel((REXPGenericVector) content);
            mainFrame.openTable(model, ro.getName());
        } else if (ro.getType().equals("matrix") || ro.getType().equals("table") || ro.getType().equals("array")) {
            TableModel model = null;
            if (content.isInteger()) {
                model = new RIntegerMatrixTableModel((REXPInteger) content);
            } else if (content.isNumeric()) {
                model = new RDoubleMatrixTableModel((REXPDouble) content);
            } else if (content.isString()) {
                model = new RStringMatrixTableModel((REXPString) content);
            }
            if (model != null) {
                mainFrame.openTable(model, ro.getName());
            }
        }
    }

    public void reload() throws REngineException, REXPMismatchException {
        workspace.reload();
    }

    public boolean hasVariable(String varname) {
        return workspace.hasVariable(varname);
    }

    public static WorkspaceView getInstance() {
        return instance;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTree workspaceTree;
    // End of variables declaration//GEN-END:variables
}
